swagger: "2.0"
info:
  version: "1.0.0"
  title: Backend
# host: localhost:3000
# basePath: /api
# schemes:
#   - http
#   - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
  
  
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
  
  
     The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz

consumes:
  - application/json
produces:
  - application/json
paths:
  /users:
    x-swagger-router-controller: users.controller
    post:
      tags:
        - Users
      operationId: usersControllerPost
      description: "Create User"
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "201":
          description: "Created"
        "403":
          description: "Access Denied"

  /polls:
    x-swagger-router-controller: polls.controller
    post:
      tags:
        - Polls
      operationId: pollsControllerPost
      summary: "Create Poll"
      description: "Create a new Poll"
      parameters:
        - name: poll
          in: body
          required: true
          schema:
            $ref: '#/definitions/Poll'
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Polls
      operationId: pollsControllerGet
      summary: "Get polls"
      description: "Get all the polls"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Poll'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

  /polls/{idPoll}:
    x-swagger-router-controller: polls.controller
    parameters:
      - name: idPoll
        in: path
        description: "ID of the poll"
        required: true
        type: string
    get:
      tags:
        - Polls
      operationId: pollsControllerGetId
      summary: "Get poll"
      description: "Get only one polls"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Poll'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

    put:
      tags:
        - Polls
      summary: "Update a poll"
      operationId: pollsControllerPutId
      description: "Update only one poll"
      responses:
        200:
          description: "Success"
          
    delete:
      tags:
        - Polls
      summary: "Delete a poll"
      operationId: pollsControllerDeleteId
      description: "Delete only one poll"
      responses:
        200:
          description: "Success"
 
  /people:
    x-swagger-router-controller: peoplecontroller
    post:
      tags:
        - People
      operationId: peopleControllerPost
      summary: "Create Poll"
      description: "Create a new Poll"
      parameters:
        - name: poll
          in: body
          required: true
          schema:
            $ref: '#/definitions/Person'
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - People
      operationId: peopleControllerGet
      summary: "Get People"
      description: "Get all the People"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/Person'
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

  /people/{idPerson}:
    x-swagger-router-controller: people.controller
    parameters:
      - name: idPerson
        in: path
        description: "ID of the Person"
        required: true
        type: string
    get:
      tags:
        - People
      operationId: peopleControllerGetId
      summary: "Get poll"
      description: "Get only one Person"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/Person'
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

    put:
      tags:
        - People
      operationId: peopleControllerPutId
      summary: "Update a poll"
      description: "Update only one poll"
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
          
    delete:
      tags:
        - People
      operationId: peopleControllerDeleteId
      summary: "Delete a poll"
      description: "Delete only one poll"
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
 
  /people/{idPerson}/patients:
    x-swagger-router-controller: patients.controller
    parameters:
      - name: idPerson
        in: path
        description: "ID of the Person"
        required: true
        type: string
    post:
      tags:
        - Patients
      operationId: patientsControllerPost
      summary: "Create Patients"
      description: "Create a new Patients"
      parameters:
        - name: poll
          in: body
          required: true
          schema:
            $ref: '#/definitions/Patient'
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Patients
      operationId: patientsControllerGet
      summary: "Get Patients"
      description: "Get all the Patients"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Patient'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

  /people/{idPerson}/patients/{idpatient}:
    x-swagger-router-controller: patients.controller
    parameters:
      - name: idpatient
        in: path
        description: "ID of the patient"
        required: true
        type: string
      - name: idPerson
        in: path
        description: "ID of the Person"
        required: true
        type: string
    get:
      tags:
        - Patients
      operationId: patientsControllerGetId
      summary: "Get patient"
      description: "Get only one patients"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Patient'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Patients
      operationId: patientsControllerPutId
      summary: "Update a patient"
      description: "Update only one patient"
      responses:
        200:
          description: "Success"
    delete:
      tags:
        - Patients
      summary: "Delete a patient"
      operationId: patientsControllerDeleteId
      description: "Delete only one patient"
      responses:
        200:
          description: "Success"

  /login:
    x-swagger-router-controller: users.controller
    post:
      tags:
        - Users
      operationId: loginPost
      description: "Login"
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Login"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

  /clients:
    x-swagger-router-controller: clients.controller
    get:
      tags:
        - Clients
      operationId: clientsControllerGet
      summary: "Get all Clients"
      responses: 
        "200":
          description: "Success"
          schema:
            items:
              $ref: "#/definitions/Client"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
            
  
  /clients/{idClient}:
    x-swagger-router-controller: clients.controller
    get:
      tags:
        - Clients
      summary: 'Get a particular client'
      operationId: clientControllerGetId
      parameters:
        - name: idClient
          in: path
          description: 'idClient'
          required: true
          type: string
      responses: 
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Client"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Clients
      summary: 'Update a client'
      operationId: clientControllerPutId
      parameters:
        - name: idClient
          in: path
          description: 'idClient'
          required: true
          type: string
        - name: client
          in: body
          required: true
          schema: 
            $ref: '#/definitions/Client'
      responses: 
        "204":
          description: "No Content"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /clients/{idClient}/topics:
    x-swagger-router-controller: clients.controller
    get:
      tags:
        - Topics per Client
      summary: 'Get topics for a particular client'
      operationId: topicsControllerGet
      parameters:
        - name: idClient
          in: path
          description: 'idClient'
          required: true
          type: string
      responses: 
        "200":
          description: "Success"
          schema:
            items:
              type: string
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /clients/{idClient}/places:
    x-swagger-router-controller: places.controller
    get:
      tags:
        - Place per Client
      summary: 'Get places for a particular client'
      operationId: placesControllerGet
      parameters:
        - name: idClient
          in: path
          description: 'idClient'
          required: true
          type: string
      responses: 
        "200":
          description: "Success"
          schema:
            items:
              $ref: "#/definitions/Place"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - Place per Client
      operationId: placeControllerPost
      description: "Create a new Place"
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: place
          in: body
          description: Place a dar de alta
          required: true
          schema:
            $ref: '#/definitions/Place'
      responses: 
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/Place"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /clients/{idClient}/places/{idPlace}:
    x-swagger-router-controller: places.controller
    get:
      tags:
        - Place per Client
      summary: 'Get a particular place for a client'
      operationId: placeControllerGetId
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
      responses: 
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Place"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Place per Client
      summary: 'Update a place'
      operationId: placeControllerPutId
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
        - name: place
          in: body
          required: true
          schema: 
            $ref: '#/definitions/Place'
      responses: 
        "204":
          description: "No COntent"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Place per Client
      summary: "Delete a Place for a client"
      operationId: placeControllerDelete
      description: "Delete a Place"
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
      responses: 
        "204":
          description: "No Content"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"  
  /clients/{idClient}/places/{idPlace}/areas:
    x-swagger-router-controller: areas.controller
    get:
      tags:
        - Areas per Place
      summary: 'Get areas for a particular Place'
      operationId: areasControllerGet
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
      responses: 
        "200":
          description: "Success"
          schema:
            items:
              $ref: "#/definitions/Area"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - Areas per Place
      operationId: areaControllerPost
      summary: "Create a new Area"
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
        - name: area
          in: body
          description: Area a dar de alta
          required: true
          schema:
            $ref: '#/definitions/Area'
      responses: 
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Area"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /clients/{idClient}/places/{idPlace}/areas/{idArea}:
    x-swagger-router-controller: areas.controller
    get:
      tags:
        - Areas per Place
      summary: 'Get a particular area for a place'
      operationId: areaControllerGetId
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
        - name: idArea
          in: path
          required: true
          type: string
      responses: 
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Area"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Areas per Place
      summary: 'Update an area'
      operationId: areaControllerPutId
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
        - name: idArea
          in: path
          required: true
          type: string
        - name: area
          in: body
          required: true
          schema: 
            $ref: '#/definitions/Area'
      responses: 
        "204":
          description: "No Content"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Areas per Place
      summary: "Delete a Area for a Place"
      operationId: areaControllerDelete
      description: "Delete an Area"
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
        - name: idArea
          in: path
          required: true
          type: string
      responses: 
        "204":
          description: "No Content"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"    
  /clients/{idClient}/places/{idPlace}/areas/{idArea}/devices:
    x-swagger-router-controller: devices.controller
    get:
      tags:
        - Devices per Area
      summary: 'Get devices for a particular Area'
      operationId: devicesControllerGet
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
        - name: idArea
          in: path
          required: true
          type: string
      responses: 
        "200":
          description: "Success"
          schema:
            items:
              $ref: "#/definitions/Device"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - Devices per Area
      operationId: deviceControllerPost
      description: "Create a new Area"
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
        - name: idArea
          in: path
          required: true
          type: string
        - name: device
          in: body
          description: Device a dar de alta
          required: true
          schema:
            $ref: '#/definitions/Device'
      responses: 
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Device"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /clients/{idClient}/places/{idPlace}/areas/{idArea}/devices/{idDevice}:
    x-swagger-router-controller: devices.controller
    get:
      tags:
        - Devices per Area
      summary: 'Get a particular device per an area'
      operationId: deviceControllerGetId
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
        - name: idArea
          in: path
          required: true
          type: string
        - name: idDevice
          in: path
          required: true
          type: string
      responses: 
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Device"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - Devices per Area
      summary: 'Update a device'
      operationId: deviceControllerPutId
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
        - name: idArea
          in: path
          required: true
          type: string
        - name: idDevice
          in: path
          required: true
          type: string
        - name: device
          in: body
          required: true
          schema: 
            $ref: '#/definitions/Device'
      responses: 
        "204":
          description: "No Content"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - Devices per Area
      summary: "Delete a device for an Area"
      operationId: deviceControllerDelete
      description: "Delete a device"
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
        - name: idArea
          in: path
          required: true
          type: string
        - name: idDevice
          in: path
          required: true
          type: string
      responses: 
        "204":
          description: "No Content"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /clients/{idClient}/places/{idPlace}/areas/{idArea}/devices/{idDevice}/changeState:
    x-swagger-router-controller: devices.controller
    post:
      tags:
        - Devices per Area
      operationId: deviceChangeStateControllerPost
      description: "Change state device"
      parameters:
        - name: idClient
          in: path
          required: true
          type: string
        - name: idPlace
          in: path
          required: true
          type: string
        - name: idArea
          in: path
          required: true
          type: string
        - name: idDevice
          in: path
          required: true
          type: string
        - name: state
          in: body
          description: state
          required: true
          schema:
            $ref: '#/definitions/State'
      responses: 
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Device"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /unprotected:
    x-swagger-router-controller: main-controller
    get:
      operationId: unprotectedGet
      description: "Unprotected endpoint"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"

  /protected:
    x-swagger-router-controller: main-controller
    get:
      operationId: protectedGet
      description: "Protected endpoint, only accessible to 'admins' and 'users'"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /protected2:
    x-swagger-router-controller: main-controller
    get:
      operationId: protected2Get
      description: "Protected endpoint, only accessible to 'admins'"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

definitions:
  Authentication:
    type: object
    properties:
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"
  User:
    type: object
    properties:
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"
      roles:
        type: array
        items:
          $ref: '#/definitions/Role'
      role:
        type: string
        example: "role"
  Role:
    type: object
    properties:
      name:
        type: string
        example: "resident"
      resources:
        type: array
        items:
          $ref: '#/definitions/Resource'
      specialPermission:
        type: string
        enum: ["Full Access", "No Access", "Null"]
        example: "Full Access"
      description:
        type: string
        example: "This is the role of a resident"
  Resource:
    type: object
    properties:
      'question':
        type: array
        items:
          $ref: '#/definitions/Permission'
      'answer':
        type: array
        items:
          $ref: '#/definitions/Permission'
      'answer type':
        type: array
        items:
          $ref: '#/definitions/Permission'
      'question group':
        type: array
        items:
          $ref: '#/definitions/Permission'
      'service':
        type: array
        items:
          $ref: '#/definitions/Permission'
      'institution':
        type: array
        items:
          $ref: '#/definitions/Permission'
      'poll':
        type: array
        items:
          $ref: '#/definitions/Permission'
      'user':
        type: array
        items:
          $ref: '#/definitions/Permission'
      'role':
        type: array
        items:
          $ref: '#/definitions/Permission'
      'procedure':
        type: array
        items:
          $ref: '#/definitions/Permission'
      'patient':
        type: array
        items:
          $ref: '#/definitions/Permission'
  Permission:
    type: object
    properties:
      create:
        type: boolean
        example: true
      delete:
        type: boolean
        example: false
      modify:
        type: boolean
        example: true
  
  Poll:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
     
      subGroup:
        type: array
        items:
          $ref: '#/definitions/PollSubGroup'

  PollSubGroup:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
        example: "¿Qué grado de dolor tienes?"
      questions:
        type: array
        items:
          $ref: '#/definitions/Question'
      typeOfAnswer:
        $ref: '#/definitions/TypeOfAnswer'
      

  TypeOfAnswer:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
        example: "Ninguno, Leve, Moderado, Severo, Extremo"
      values:
        type: array
        items:
          $ref: '#/definitions/Values'

  Values:
    type: object
    properties:
      id:
        type: string
      value:
        type: string
        example: "MODERADO"
      score:
        type: integer
        example: "2"

  Question:
    type: object
    properties:
      id:
        type: string
      question:
        type: string
        example: "Subiendo y bajando escaleras"

  Person:
    type: object
    properties:
      id:
        type: string
      dni:
        type: string
        example: "37195387"
      birthdate:
        type: string
        example: "09/01/1993"
      name:
        type: string
        example: "Federico Martin"
      lastname:
        type: string
        example: "Cabanilla"

  Patient:
    type: object
    properties:
      id:
        type: string
      personId:
        type: string
      erased:
        type: boolean
        example: false
      notes:
        type: string
        description: "Alguna descripcion que se necesite hacer del paciente, es para uso interno"
        example: "El paciente tiene antecedentes cardiacos"
      socialSecurityId:
        type: string
    
  State:
    type: object
    properties:
      state:
        type: string
  Login:
    type: object
    properties:
      token:
        type: string
      client:
        type: string
  Client:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
      user:
        type: string
  Place:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
      areas:
        type: array
        items:
          $ref: '#/definitions/Area'
  Area:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
      devices:
        type: array
        items:
          $ref: '#/definitions/Device'
  Device:
    type: object
    properties:
      _id:
        type: string
      name:
        type: string
      state:
        type: string
      typeOfData:
        type: string
  Error:
    type: object
    properties:
      message:
        type: string
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /fcabanilla/test-solange/1.0.0
schemes:
 - https
 - http