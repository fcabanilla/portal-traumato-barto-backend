swagger: "2.0"
info:
  version: "1.0.0"
  title: Backend
host: localhost:4000
basePath: /api
schemes:
  - http
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.
  
  
     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.
  
  
     The following syntax must be used in the 'Authorization' header :
  
         Bearer xxxxxx.yyyyyyy.zzzzzz




consumes:
  - application/json
produces:
  - application/json
paths:
  /users:
    x-swagger-router-controller: users.controller
    post:
      tags:
        - Users
        - Login
      operationId: usersControllerPost
      description: "Create User"
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "201":
          description: "Created"
        "403":
          description: "Access Denied"
    get:
      tags:
        - Users
      operationId: usersControllerGet
      summary: "Get All The Users"
      description: "Get all the users"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/User'
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /users/{idUser}:
    x-swagger-router-controller: users.controller
    parameters:
      - name: idUser
        in: path
        description: "ID of the User"
        required: true
        type: string
    get:
      tags:
        - Users
      operationId: usersControllerGetId
      summary: "Get an User"
      description: "Get only one User"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/User'
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    
    put:
      tags:
        - Users
      operationId: usersControllerPut
      summary: "Update an User"
      description: "Update only one User"
      parameters:
        - name: User
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    
    delete:
      tags:
        - Users
      operationId: usersControllerDelete
      summary: "Delete an User"
      description: "Delete only one User"
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /login:
    x-swagger-router-controller: users.controller
    post:
      tags:
        - Login
      operationId: loginPost
      description: "Login"
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            $ref: "#/definitions/Authentication"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Login"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /typesOfAnswers:
    x-swagger-router-controller: typesOfAnswers.controller
    post:
      tags:
        - "Types of Answers"
      operationId: typesOfAnswersControllerPost
      summary: "Create a Type of Answer"
      description: "Create a type of Answer"
      parameters:
        - name: typeOfAnswer
          in: body
          required: true
          schema: 
            $ref: '#/definitions/typeOfAnswer'
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - "Types of Answers"
      operationId: typesOfAnswersControllerGet
      summary: "Get All The Types Of Answers"
      description: "Get All The Types Of Answers"
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /typesOfAnswers/{idTypeOfAnswer}:
    x-swagger-router-controller: typesOfAnswers.controller
    parameters:
      - name: idTypeOfAnswer
        in: path
        description: "ID of the Type of Answer"
        required: true
        type: string
    get:
      tags:
        - "Types of Answers"
      operationId: typesOfAnswersControllerGetId
      summary: "Get Only One Type of Answer"
      description: "Get Only One Type of Answer sending the ID of Type of Answer"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/typeOfAnswer'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - "Types of Answers"
      operationId: typesOfAnswersControllerPut
      summary: "Update Only One Type of Answer"
      description: "Update Only One Type of Answer sending the ID of Type of Answer"
      parameters:
        - name: typeOfAnswer
          in: body
          required: true
          schema: 
            $ref: '#/definitions/typeOfAnswer'
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - "Types of Answers"
      operationId: typesOfAnswersControllerDelete
      summary: "Delete One Type of Answer"
      description: "Delete One Type of Answer sending the ID of Type of Answer"
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /procedure/{idProcedure}/polls:
    x-swagger-router-controller: polls.controller
    parameters:
      - name: idProcedure
        in: path
        description: "ID of the Procedure"
        required: true
        type: string
    post:
      tags:
        - Polls
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
        - dev
        - fede
      operationId: pollsControllerPost
      summary: "Create Poll"
      description: "Create a new Poll"
      parameters:
        - name: poll
          in: body
          required: true
          schema:
            $ref: '#/definitions/Poll'
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Polls
      operationId: pollsControllerGet
      summary: "Get polls"
      description: "Get all the polls"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Poll'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /procedure/{idProcedure}/polls/{idPoll}:
    x-swagger-router-controller: polls.controller
    parameters:
      - name: idPoll
        in: path
        description: "ID of the poll"
        required: true
        type: string
      - name: idProcedure
        in: path
        description: "ID of the Procedure"
        required: true
        type: string
    get:
      tags:
        - Polls
      operationId: pollsControllerGetId
      summary: "Get poll"
      description: "Get only one polls"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Poll'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

    put:
      tags:
        - Polls
      summary: "Update a poll"
      operationId: pollsControllerPut
      description: "Update only one poll"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
        - dev
        - fede
      parameters:
        - name: poll
          in: body
          required: true
          schema:
            $ref: '#/definitions/Poll'
      responses:
        200:
          description: "Success"
          
    delete:
      tags:
        - Polls
      summary: "Delete a poll"
      operationId: pollsControllerDelete
      description: "Delete only one poll"
      responses:
        200:
          description: "Success"
  /detailProcedure/{idDetailTypeProcedure}/emptyPolls:
    x-swagger-router-controller: emptyPolls.controller
    parameters:
      - name: idDetailTypeProcedure
        in: path
        description: "ID of the Detail of Type of Procedure"
        required: true
        type: string
    post:
      tags:
        - Empty Polls
      operationId: emptyPollsControllerPost
      summary: "Create Empty Poll"
      description: "Create a new Empty Poll"
      parameters:
        - name: emptyPoll
          in: body
          required: true
          schema:
            $ref: '#/definitions/EmptyPoll'
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Empty Polls
      operationId: emptyPollsControllerGet
      summary: "Get Empty Poll"
      description: "Get all the Empty Poll"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/EmptyPoll'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /detailProcedure/{idDetailTypeProcedure}/emptyPolls/{idEmptyPoll}:
    x-swagger-router-controller: emptyPolls.controller
    parameters:
      - name: idEmptyPoll
        in: path
        description: "ID of the Empty Poll"
        required: true
        type: string
      - name: idDetailTypeProcedure
        in: path
        description: "ID of the Detail of Type of Procedure"
        required: true
        type: string

    get:
      tags:
        - Empty Polls
      operationId: emptyPollsControllerGetId
      summary: "Get Empty Poll"
      description: "Get only one Empty Poll"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/EmptyPoll'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

    put:
      tags:
        - Empty Polls
      summary: "Update a Empty Poll"
      operationId: emptyPollsControllerPut
      description: "Update only one Empty Poll"
      parameters:
        - name: emptyPoll
          in: body
          required: true
          schema:
            $ref: '#/definitions/EmptyPoll'
      responses:
        200:
          description: "Success"
          
    delete:
      tags:
        - Empty Polls
      summary: "Delete a poll"
      operationId: emptyPollsControllerDelete
      description: "Delete only one Empty Poll"
      responses:
        200:
          description: "Success"
  /emptyPolls/{idEmptyPoll}/groups:
    x-swagger-router-controller: groups.controller
    parameters:
      - name: idEmptyPoll
        in: path
        description: "ID of the Group"
        required: true
        type: string
    post:
      tags:
        - "Groups"
      operationId: groupsControllerPost
      summary: "Create a Group"
      description: "Create a Group"
      parameters:
        - name: group
          in: body
          required: true
          schema: 
            $ref: '#/definitions/PollGroup'
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - "Groups"
      operationId: groupsControllerGet
      summary: "Get All The Groups"
      description: "Get All The Groups"
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /emptyPolls/{idEmptyPoll}/groups/{idGroup}:
    x-swagger-router-controller: groups.controller
    parameters:
      - name: idEmptyPoll
        in: path
        description: "ID of the Group"
        required: true
        type: string
      - name: idGroup
        in: path
        description: "ID of the Group"
        required: true
        type: string
    get:
      tags:
        - "Groups"
      operationId: groupsControllerGetId
      summary: "Get Only One Group"
      description: "Get Only One Group sending the ID of Group"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/PollGroup'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - "Groups"
      operationId: groupsControllerPut
      summary: "Update Only One Group"
      description: "Update Only One Group sending the ID of Group"
      parameters:
        - name: group
          in: body
          required: true
          schema: 
            $ref: '#/definitions/PollGroup'
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - "Groups"
      operationId: groupsControllerDelete
      summary: "Delete One Group"
      description: "Delete One Group sending the ID of Group"
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /groups/{idGroup}/subgroups:
    x-swagger-router-controller: subgroups.controller
    parameters:
      - name: idGroup
        in: path
        description: "ID of th Group"
        required: true
        type: string
    post:
      tags:
        - "Sub-Groups"
      operationId: subgroupsControllerPost
      summary: "Create a Sub-Group"
      description: "Create a Sub-Group"
      parameters:
        - name: subgroup
          in: body
          required: true
          schema: 
            $ref: '#/definitions/PollSubGroup'
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - "Sub-Groups"
      operationId: subgroupsControllerGet
      summary: "Get All The Sub-Groups"
      description: "Get All The Sub-Groups"
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /groups/{idGroup}/subgroups/{idSubgroup}:
    x-swagger-router-controller: subgroups.controller
    parameters:
      - name: idSubgroup
        in: path
        description: "ID of the Sub-Group"
        required: true
        type: string
      - name: idGroup
        in: path
        description: "ID of th Group"
        required: true
        type: string
    get:
      tags:
        - "Sub-Groups"
      operationId: subgroupsControllerGetId
      summary: "Get Only One Sub-Group"
      description: "Get Only One Sub-Group sending the ID of Sub-Group"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/PollSubGroup'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - "Sub-Groups"
      operationId: subgroupsControllerPut
      summary: "Update Only One Sub-Group"
      description: "Update Only One Sub-Group sending the ID of Sub-Group"
      parameters:
        - name: subgroup
          in: body
          required: true
          schema: 
            $ref: '#/definitions/PollSubGroup'
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - "Sub-Groups"
      operationId: subgroupsControllerDelete
      summary: "Delete One Sub-Group"
      description: "Delete One Sub-Group sending the ID of Sub-Group"
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /groups/{idGroup}/subgroups/{idSubgroup}/questions:
    x-swagger-router-controller: questions.controller
    parameters:
      - name: idGroup
        in: path
        description: "Id of the Group"
        required: true
        type: string
      - name: idSubgroup
        in: path
        description: "Id of the Subgroup"
        required: true
        type: string
    post:
      tags:
        - Questions
      operationId: questionsControllerPost
      summary: "Create Question"
      description: "Create a new Question"
      parameters:
        - name: Question
          in: body
          required: true
          schema:
            $ref: '#/definitions/Question'
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Questions
      operationId: questionsControllerGet
      summary: "Get Question"
      description: "Get all the Question"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Question'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /groups/{idGroup}/subgroups/{idSubgroup}/questions/{idQuestion}:
    x-swagger-router-controller: questions.controller
    parameters:
      - name: idGroup
        in: path
        description: "Id of the Group"
        required: true
        type: string
      - name: idSubgroup
        in: path
        description: "Id of the Subgroup"
        required: true
        type: string
      - name: idQuestion
        in: path
        description: "ID of the Question"
        required: true
        type: string
    get:
      tags:
        - Questions
      operationId: questionsControllerGetId
      summary: "Get Question"
      description: "Get only one Question"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Question'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

    put:
      tags:
        - Questions
      operationId: questionsControllerPut
      summary: "Update a Question"
      description: "Update only one Question"
      parameters:
        - name: Question
          in: body
          required: true
          schema:
            $ref: '#/definitions/Question'
      responses:
        200:
          description: "Success"
          
    delete:
      tags:
        - Questions
      operationId: questionsControllerDelete
      summary: "Delete a Question"
      description: "Delete only one Question"
      responses:
        200:
          description: "Success"
  /patients:
    x-swagger-router-controller: patients.controller
    post:
      tags:
        - Patients
      operationId: patientsControllerPost
      summary: "Create Patients"
      description: "Create a new Patients"
      parameters:
        - name: poll
          in: body
          required: true
          schema:
            $ref: '#/definitions/Patient'
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Patients
      operationId: patientsControllerGet
      summary: "Get Patients"
      description: "Get all the Patients"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Patient'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /patients/{idpatient}:
    x-swagger-router-controller: patients.controller
    parameters:
      - name: idpatient
        in: path
        description: "ID of the patient"
        required: true
        type: string
    get:
      tags:
        - Patients
      operationId: patientsControllerGetId
      summary: "Get patient"
      description: "Get only one patients"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Patient'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Patients
      operationId: patientsControllerPut
      summary: "Update a patient"
      description: "Update only one patient"
      parameters:
        - name: poll
          in: body
          required: true
          schema:
            $ref: '#/definitions/Patient'
      responses:
        200:
          description: "Success"
    delete:
      tags:
        - Patients
      summary: "Delete a patient"
      operationId: patientsControllerDelete
      description: "Delete only one patient"
      responses:
        200:
          description: "Success"
  /typeProcedure:
    x-swagger-router-controller: typesProcedures.controller
    post:
      tags:
        - Type Of Procedure
      operationId: typeProcedureControllerPost
      summary: "Create Type Procedure"
      description: "Create a new Type of Procedure"
      parameters:
        - name: TypeProcedure
          in: body
          required: true
          schema:
            $ref: '#/definitions/TypeProcedure'
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Type Of Procedure
      operationId: typeProcedureControllerGet
      summary: "Get Types of Procedures"
      description: "Get all the Type of Procedure"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/TypeProcedure'
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /typeProcedure/{idTypeProcedure}:
    x-swagger-router-controller: typesProcedures.controller
    parameters:
      - name: idTypeProcedure
        in: path
        description: "ID of Type of Type Of Procedure"
        required: true
        type: string
    get:
      tags:
        - Type Of Procedure
      operationId: typeProcedureControllerGetId
      summary: "Get Type Of Procedure"
      description: "Get only one Type Of Procedure"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/TypeProcedure'
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

    put:
      tags:
        - Type Of Procedure
      operationId: typeProcedureControllerPut
      summary: "Update a Type Of Procedure"
      description: "Update only one Type Of Procedure"
      parameters:
        - name: TypeProcedure
          in: body
          required: true
          schema:
            $ref: '#/definitions/TypeProcedure'
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
          
    delete:
      tags:
        - Type Of Procedure
      operationId: typeProcedureControllerDelete
      summary: "Delete a Type Of Procedure"
      description: "Delete only one Type Of Procedure"
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /typeProcedure/{idTypeProcedure}/detailProcedure:
    x-swagger-router-controller: detailsTypesProcedures.controller
    parameters:
      - name: idTypeProcedure
        in: path
        description: "ID of the Type Procedure"
        required: true
        type: string
    post:
      tags:
        - Detail of Type of Procedure
      operationId: detailTypeProcedureControllerPost
      summary: "Create Detail Type Procedure"
      description: "Create a new Detail of Type of Procedure"
      parameters:
        - name: DetailTypeProcedure
          in: body
          required: true
          schema:
            $ref: '#/definitions/DetailTypeProcedure'
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Detail of Type of Procedure
      operationId: detailTypeProcedureControllerGet
      summary: "Get All Details of One Types of Procedures"
      description: "Get all Details of one Type of Procedure"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/DetailTypeProcedure'
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /typeProcedure/{idTypeProcedure}/detailProcedure/{idDetailTypeProcedure}:
    x-swagger-router-controller: detailsTypesProcedures.controller
    parameters:
      - name: idTypeProcedure
        in: path
        description: "ID of Type of Procedure"
        required: true
        type: string
      - name: idDetailTypeProcedure
        in: path
        description: "ID of Detail of Type Of Procedure"
        required: true
        type: string
    get:
      tags:
        - Detail of Type of Procedure
      operationId: detailTypeProcedureControllerGetId
      summary: "Get Detail of Type of Procedure"
      description: "Get only one Detail of Type of Procedure"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/DetailTypeProcedure'
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

    put:
      tags:
        - Detail of Type of Procedure
      operationId: detailTypeProcedureControllerPut
      summary: "Update a Detail of Type of Procedure"
      description: "Update only one Detail of Type of Procedure"
      parameters:
        - name: DetailTypeProcedure
          in: body
          required: true
          schema:
            $ref: '#/definitions/DetailTypeProcedure'
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
          
    delete:
      tags:
        - Detail of Type of Procedure
      operationId: detailTypeProcedureControllerDelete
      summary: "Delete a Detail of Type of Procedure"
      description: "Delete only one Detail of Type of Procedure"
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /procedure:
    x-swagger-router-controller: procedures.controller
    post:
      tags:
        - Procedure
      operationId: proceduresControllerPost
      summary: "Create Procedure"
      description: "Create a new Procedure"
      parameters:
        - name: Procedure
          in: body
          required: true
          schema:
            $ref: '#/definitions/Procedure'
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Procedure
      operationId: proceduresControllerGet
      summary: "Get Procedure"
      description: "Get all the Procedure"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/Procedure'
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /procedure/{idProcedure}:
    x-swagger-router-controller: procedures.controller
    parameters:
      - name: idProcedure
        in: path
        description: "ID of the Person"
        required: true
        type: string
    get:
      tags:
        - Procedure
      operationId: proceduresControllerGetId
      summary: "Get procedure"
      description: "Get only one Person"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/Person'
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

    put:
      tags:
        - Procedure
      operationId: proceduresControllerPut
      summary: "Update a procedure"
      description: "Update only one procedure"
      parameters:
        - name: Procedure
          in: body
          required: true
          schema:
            $ref: '#/definitions/Procedure'
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
          
    delete:
      tags:
        - Procedure
      operationId: proceduresControllerDelete
      summary: "Delete a procedure"
      description: "Delete only one procedure"
      responses:
        200:
          description: "Success"
        403:
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /institutions:
    x-swagger-router-controller: institutions.controller
    post:
      tags:
        - Institution
      operationId: institutionsControllerPost
      summary: "Create Institution"
      description: "Create a new Institution"
      parameters:
        - name: institution
          in: body
          required: true
          schema:
            $ref: '#/definitions/Institution'
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Institution
      operationId: institutionsControllerGet
      summary: "Get Institution"
      description: "Get all the Institution"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Institution'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /institutions/{idInstitution}:
    x-swagger-router-controller: institutions.controller
    parameters:
      - name: idInstitution
        in: path
        description: "ID of the Institution"
        required: true
        type: string
    get:
      tags:
        - Institution
      operationId: institutionsControllerGetId
      summary: "Get Institution"
      description: "Get only one Institution"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Institution'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

    put:
      tags:
        - Institution
      operationId: institutionsControllerPut
      summary: "Update a Institution"
      description: "Update only one Institution"
      parameters:
        - name: institution
          in: body
          required: true
          schema:
            $ref: '#/definitions/Institution'
      responses:
        200:
          description: "Success"
          
    delete:
      tags:
        - Institution
      operationId: institutionsControllerDelete
      summary: "Delete a Institution"
      description: "Delete only one Institution"
      responses:
        200:
          description: "Success"
  /institutions/{idInstitution}/services:
    x-swagger-router-controller: services.controller
    parameters:
      - name: idInstitution
        in: path
        description: "ID of the Institution"
        required: true
        type: string
    post:
      tags:
        - Services
      operationId: servicesControllerPost
      summary: "Create Service"
      description: "Create a new Service"
      parameters:
        - name: service
          in: body
          required: true
          schema:
            $ref: '#/definitions/Service'
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Services
      operationId: servicesControllerGet
      summary: "Get Services"
      description: "Get all the Services"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Service'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'
  /institutions/{idInstitution}/services/{idService}:
    x-swagger-router-controller: services.controller
    parameters:
      - name: idInstitution
        in: path
        description: "ID of the Institution"
        required: true
        type: string
      - name: idService
        in: path
        description: "ID of the Service"
        required: true
        type: string
    get:
      tags:
        - Services
      operationId: servicesControllerGetId
      summary: "Get Service"
      description: "Get only one Service"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: '#/definitions/Service'
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

    put:
      tags:
        - Services
      operationId: servicesControllerPut
      summary: "Update a Service"
      description: "Update only one Service"
      parameters:
        - name: service
          in: body
          required: true
          schema:
            $ref: '#/definitions/Service'
      responses:
        200:
          description: "Success"
          
    delete:
      tags:
        - Services
      operationId: servicesControllerDelete
      summary: "Delete a Service"
      description: "Delete only one Service"
      responses:
        200:
          description: "Success" 
  /protected:
    x-swagger-router-controller: main-controller
    get:
      operationId: protectedGet
      description: "Protected endpoint, only accessible to 'admins' and 'users'"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
        - fede
        - RESIDENTE
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /protected2:
    x-swagger-router-controller: main-controller
    get:
      operationId: protected2Get
      description: "Protected endpoint, only accessible to 'admins'"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - ALLENDE
        - ASD
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /test:
    x-swagger-router-controller: test.controller
    get:
      tags:
        - Test
      description: "is a test endpoint"
      operationId: testsControllerGet
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Resource"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - Test
      operationId: testsControllerPost
      summary: "Create Institution"
      description: "Create a new Institution"
      parameters:
        - name: institution
          in: body
          required: true
          schema:
            $ref: '#/definitions/Institution'
      responses:
        "200":
          description: "Success"
        "403":
          description: "Access Denied"
          schema:
            $ref: '#/definitions/Error'

definitions:
  Authentication:
    type: object
    properties:
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"

  User:
    type: object
    properties:
      dni:
        type: string
        example: "dni"
      firstname:
        type: string
        example: "firstname"
      lastname:
        type: string
        example: "lastname"
      birthdate:
        type: string
        example: "birthdate"
      username:
        type: string
        example: "username"
      password:
        type: string
        example: "password"
      email:
        type: string
        example: "example@exp.com"
      roles:
        type: array
        items:
          $ref: '#/definitions/Role'

  Role:
    type: object
    properties:
      name:
        type: string
        example: "resident"
      resources:
        $ref: '#/definitions/Resource'
      specialPermission:
        type: string
        enum: ["Full Access", "No Access", "Null"]
        example: "Full Access"
      description:
        type: string
        example: "This is the role of a resident"
  
  Resource:
    type: object
    properties:
      'question':
        $ref: '#/definitions/Permission'
      'answer':
        $ref: '#/definitions/Permission'
      'answer type':
        $ref: '#/definitions/Permission'
      'question group':
        $ref: '#/definitions/Permission'
      'service':
        $ref: '#/definitions/Permission'
      'institution':
        $ref: '#/definitions/Permission'
      'poll':
        $ref: '#/definitions/Permission'
      'user':
        $ref: '#/definitions/Permission'
      'role':
        $ref: '#/definitions/Permission'
      'procedure':
        $ref: '#/definitions/Permission'
      'patient':
        $ref: '#/definitions/Permission'
  
  Permission:
    type: object
    properties:
      view:
        type: boolean
        example: true
      create:
        type: boolean
        example: true
      delete:
        type: boolean
        example: false
      modify:
        type: boolean
        example: true
  
  Service:
    type: object
    properties:
      id:
        type: string
      serviceName:
        type: string
        example: "Traumatologia"
      serviceCode:
        type: string
        example: "35489"
      owner:
        type: string
        example: "Bartolome Allende"
  
  Institution:
    type: object
    properties:
      id:
        type: string
        description: ""
      institutionName:
        type: string
        description: ""
        example: "Sanatorio Allende"
      displayName:
        type: string
        description: ""
        example: "Sanatorio Allende Nueva Córdoba"
      country:
        type: string
        description: ""
        example: "Argentina"
      state:
        type: string
        description: ""
        example: "Cordoba"
      city:
        type: string
        description: ""
        example: "Cordoba"
      direction:
        type: string
        description: ""
        example: "Av. Hipólito Yrigoyen 384"
      description:
        type: string
        description: ""
        example: ""
      typeOfEstablishment:
        type: string
        description: ""
        example: ""
  
  TypeProcedure:
    type: object
    properties:
      id:
        type: string
      typeOfProcedure:
        type: string
        example: "Cirugia"
      detail:
        type: string
        example: "Apendicectomía"
      description:
        type: string
        example: "La apendicectomía es la técnica quirúrgica por medio de la cual se extrae el apéndice (apéndice cecal, vermiforme o vermicular), habitualmente en casos de apendicitis aguda"

  DetailTypeProcedure:
    type: object
    properties:
      id:
        type: string
      idTypeProcedure:
        type: string
      detail:
        type: string
        example: "Swan Ganz"
      description:
        type: string
        example: "Procedimiento médico en el que se pasa una sonda delgada hasta el lado derecho del corazón con el fin de monitorizar el paso de sangre a través del corazón y vigilar la función cardíaca en pacientes muy enfermos."

  Procedure:
    type: object
    properties:
      id:
        type: string
      idTypeOfProcedure:
        type: string
        example: "497024ee-2542-11ea-9214-ac220b26bfde"
      idDetailProcedure:
        type: string
        example: "6b0749c7-25d7-11ea-9214-ac220b26bfde"
      date:
        type: string
        example: "09/09/2019"
      institutionId:
        type: string
        example: "e034cefc-25d7-11ea-9214-ac220b26bfde"
      serviceId:
        type: string
        example: "dbb25569-25d7-11ea-9214-ac220b26bfde"
      patientId:
        type: string
        example: "d7246687-25d7-11ea-9214-ac220b26bfde"
      description:
        type: string
        example: "Operacion de rodilla realizada al senior bla bla en el sanatorio allende centro a cargo del servicio de cirugia."
        
  Poll:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
        example: "Womac Score"
      type:
        type: string
        example: "Score"
      detail:
        type: string
        example: "Pre Quirurgico"
      group:
        type: array
        items:
          $ref: '#/definitions/PollGroup'
  
  EmptyPoll:
    type: object
    properties:
      id:
        type: string
      name:
        type: string

  PollGroup:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
      
        type: string
     
      subGroup:
        type: array
        items:
          $ref: '#/definitions/PollSubGroup'

  PollSubGroup:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
        example: "¿Qué grado de dolor tienes?"
      questions:
        type: array
        items:
          $ref: '#/definitions/Question'
      typeOfAnswer:
        $ref: '#/definitions/typeOfAnswer'
      
  typeOfAnswer:
    type: object
    properties:
      idTypeOfAnswer:
        type: string
      typeOfAnswer:
        type: string
        example: "TIPO DE REVISION, TIEMPO DE REVISION"
      description:
        type: string
        example: "En que instancia se encuentra para dicha revision."
      sampleValues:
        type: string
        example: "Ninguno, Leve, Moderado, Severo, Extremo"
      answers:
        type: array
        items:
          $ref: '#/definitions/answer'
      addable:
        type: boolean
        example: true
        type: string

  answer:
    type: object
    properties:
      id:
        type: string
      value:
        type: string
        example: "MODERADO"
      score:
        type: integer
        example: 2

  Question:
    type: object
    properties:
      id:
        type: string
      question:
        type: string
        example: "Subiendo y bajando escaleras"

  Person:
    type: object
    properties:
      id:
        type: string
      dni:
        type: string
        example: "37195387"
      birthdate:
        type: string
        example: "09/01/1993"
      firstname:
        type: string
        example: "Federico Martin"
      lastname:
        type: string
        example: "Cabanilla"

  Patient:
    type: object
    properties:
      id:
        type: string
      personId:
        type: string
      erased:
        type: boolean
        example: false
      notes:
        type: string
        description: "Alguna descripcion que se necesite hacer del paciente, es para uso interno"
        example: "El paciente tiene antecedentes cardiacos"
      socialSecurityId:
        type: string
    
  Login:
    type: object
    properties:
      token:
        type: string
      client:
        type: string

  Error:
    type: object
    properties:
      message:
        type: string